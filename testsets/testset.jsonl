
    {
        "user_input":"What is the Dalton color collection used for in data visualization?",
        "reference_contexts":[
            "Pie and donut charts Progression charts Was this helpful? Send feedback Selecting an effective data visualization bookmark_borderbookmark Stay organized with collections Save and categorize content based on your preferences. * On this page * Consider the characteristics of your data * Define your audience * Select the best visualization for your data * Cartesian charts * Pie and donut charts * Progression charts Data visualization refers to any visual representation of compiled information. With an effective data visualization, you can communicate key themes and results to your audiences, empowering them to interpret and analyze data that has been customized for their needs. Before you can begin creating visualizations and graphs, you need to select the type of visualization you will use. Selecting the appropriate visualization type helps you present your data clearly and effectively, allowing your audience to make informed decisions and determine next steps. The following sections describe how data can be effectively visualized in a way that centers on both your analytic objectives and your audience's perspectives: * Consider the characteristics of your data * Define your audience * Select the best visualization for your data Consider the characteristics of your data Before you decide on a visualization type, consider the characteristics of your data: * Categorical : When your data contains groups of similar patterns and sets, using a visualization type that best supports categorical data, such as a pie chart, is effective. Product category would be an example of categorical data, as it groups items based on similar functions and features. * Ordinal: If your data requires a specific ordered sequence, using a visualization such as a column chart or bar chart can define these orders for the audience. An example of ordinal data would be the numbers of varying starred reviews for a particular product. * Continuous: If you want to visualize data that occurs over a long period of time, use visualizations that support continuous data, such as progression charts. Total product sales over a particular quarter would be an example of continuous data, since evolving data is tracked over time. Define your audience An effective visualization considers not only the data but also the perspective and needs of its audience. Customizing a visualization's appearance allows you to convey information effectively to your specific audience. When you define your audience, think about factors like their likely level of technical knowledge and their job functions. How will your audience use your visualization? Accessibility When you create a data visualization, make it accessible. Throughout any data visualization project, considering web accessibility provides increased sharing opportunities for all users, including those with visual and cognitive disabilities, who will engage with your created content. The Web Content Accessibility Guidelines (WCAG) include implementation steps for increased accessibility that are applicable to visualization design, including: * Alternative text: Alternative text, or alt text, allows a larger audience to access information from non-text elements, such as people who use screen readers. With Looker, you can add notes to your visualizations that describe key aspects of your visualization. To learn more about adding text descriptions to elements of Looker visualizations, see the information about editing a tile note on the Editing user-defined dashboards documentation page. * Contrast and color accessibility: Incorporating contrast levels that meet the WCAG international standard ensures that perceived differences in color choices are accessible to viewers of the visualizations. To find the contrast ratio of two selected Hex Color codes, see the Contrast Checker from WebAIM. In Looker, the Dalton color collection accommodates specifically for various forms of color deficiency. To learn more about this collection and other color selection options in Looker, see the Color collections documentation page. For more information about accessibility in creating visualizations and other content, see the latest published version of the Web Content Accessibility Guidelines. Select the best visualization for your data The following sections provide an overview of available visualization types in Looker and discuss how to select the best type for your data: * Cartesian charts * Pie and donut charts * Progression charts * Texts and tables Cartesian charts A Cartesian chart refers to any chart that is rooted in the Cartesian plane. The Cartesian plane is defined by an x-axis and a y-axis, with corresponding numerical points for all locations on the graph. All Cartesian charts plot data on these axes. The x-axis and y-axis reflect dimensions and measures. Dimensions reflect values that are qualitative, while measures are quantitative in nature. How these values are charted across the x-axis and y-axis and the visualized expression of this data varies by Cartesian chart type. This section includes the following examples of Cartesian charts: Column Best for visualizing data with few categories to compare. Column charts are vertical Cartesian charts that display information in rectangular, vertical shapes, where the length of the column corresponds to the data value. Typical column charts include data categories on the x-axis and data values on the y-axis. If your data contains only a couple of categories, a column chart is ideal. If your data contains a larger number of categories, bar charts often work better because they provide more space for axes labels. Because negative values are displayed with a downward direction, column charts can also be a useful way to depict datasets that include negative values. The following example of a column chart includes both positive and negative values to display average order profit for both accessories and jeans sold per month. See the Column chart options documentation page for more information about creating these charts in Looker. Bar Best for visualizing data with long category titles. Bar charts display data in a similar way to column charts, but through horizontal alignment. Commonly in bar charts, the y-axis represents a data category, while the x-axis represents a numerical value. If your data contains particularly long category titles, bar charts would be favorable over column charts. Through the alignment on the y-axis, the labels on bar charts optimize space and improve readability. Additionally, bar"
        ],
        "reference":"In Looker, the Dalton color collection is used to accommodate specifically for various forms of color deficiency, ensuring contrast and color accessibility in data visualizations.",
        "synthesizer_name":"single_hop_specifc_query_synthesizer"
    }

    {
        "user_input":"What regions in the United States were represented in the line chart example?",
        "reference_contexts":[
            "charts are typically better at representing larger amounts of categories due to spacing alignment as opposed to column charts. The following example of a bar chart highlights how longer clothing category titles, like \"Fashion Hoodies & Sweatshirts\" fit on bar chart alignment. This chart shows the amount of monthly orders for 10 separate clothing categories. To learn more about creating bar charts in Looker, see the Bar chart options documentation page. Scatterplot Best for highlighting correlation between two variables. A scatterplot chart is a form of Cartesian chart that highlights the relationship between two variables. Each plotted point represents a value on the x-axis and y-axis that provides insight about the data. These types of charts particularly highlight trends and patterns that emerge in data. If your data contains two variables that correlate, a scatterplot can be an ideal visualization method to find and explore correlations. This could be positive correlation, which means that while the x variable increases, the y variable increases. This could also include negative correlation, meaning that while one variable increases, the other decreases. Correlation can also be null, meaning that there is no correlation between the two chosen variables. Awareness of potential data correlation can lead to greater insight about your data and can even guide predictions of future data behavior. The layout and structure of a scatterplot are key to its effectiveness. The plotted points on scatterplots can also be customized through sizing and color use to identify additional variables or categories for the viewer. Trend lines can also be used with scatterplots; these lines highlight connections between the data that emerge for the viewer. Through customization, ensure that these design choices highlight the overall goal of illustrating a relationship and providing a chance to examine potential patterns, correlations, and trends. The following scatterplot chart represents the number of customers who frequented locations quarterly from 2015 to 2018. The points on the chart are sized by the number of customers. To learn more about this type of Cartesian visualization, see the Scatterplot chart options documentation page. Line Best for visualizing continuous data over time. In a line chart , data is displayed through a series of points connected by a straight line. This visualization type specifically highlights continuous data over time. For clarity in your line chart, the amount of lines present remains key. If you're including multiple lines in your chart, use colors to clearly differentiate between the lines. This will allow the viewer to interpret the values separately rather than merging the lines. The following line chart represents monthly active website users from 2016 to 2019. The three separate lines represent regions in the United States: the East Coast, Midwest, and West Coast. See the Line chart options documentation page to learn more about creating a line chart in Looker. Area Best for visualizing shifts in quantities over time. An area chart builds upon characteristics of other Cartesian charts, the bar chart and the line chart. Like line charts, area charts highlight continuous data over time in a linear formation. However, these charts utilize a filled color feature similar to a bar chart to display quantity through the data. This allows for the viewer to clearly see how quantities adjust over time. Area charts convey overall trends rather than individual data points. Area charts are better when you are comparing a smaller number of trends, due to the color-filled area components. For highlighting data with larger amounts of trends, consider using a line chart instead. The following area chart mirrors the line chart visualization example by also showing monthly website users across regions in the United States. However, the filled color in this chart particularly highlights the shift in quantities of users from 2018 to 2019 specifically. To learn more about area charts in Looker, see the Area chart options documentation page. Pie and donut charts Pie and donut charts emphasize the relationship between parts to a whole proportion in data. For this reason, they work well to highlight categorical information, meaning information that can clearly be divided into groups based on shared characteristics. To best highlight the information in the pie and donut charts, select five or fewer categories. If your categories exceed five, consider selecting a different visualization type to highlight the information, such as a bar or column chart. As a pie or donut chart represents a whole percentage, the values of the categories must add to 100 percent. Looker offers two variations of a pie chart. This section describes the following charts and highlights their strengths in displaying categorical data: * Donut multiples Pie Best for visualizing proportional values. A pie chart refers to a complete circular chart that is divided into slices based on categories of information. Through these slice divisions, a focus becomes not specifically on the exact percentage amount, but on how the outlined proportions relate to each other and impact the overall goal of the chart. If you are working to emphasize the importance of the connections between proportional values, pie charts effectively communicate these relationships. If you are working with more than five categories of data, consider selecting a different visualization chart to highlight the information, such as a bar or column chart. With bars and column charts, it is often easier for viewers to perceive individual differences. The following pie chart represents the percentages of total customers from three regions in the United States: the East Coast, West Coast, and Midwest. This visualization type communicates the proportional amount of customers from each region. See the Pie chart options documentation page to learn more about creating these comparison charts in Looker. Donut Multiples Best for visualizing proportional values with multiple components. Donut multiples let you create a series of donut charts to visualize your data in an interconnected formation. These charts omit the center of the circle, forming arc divisions instead of slice divisions. The added blank space in the middle of the chart allows for further labels and descriptions of your data."
        ],
        "reference":"The line chart example represents monthly active website users from 2016 to 2019, with three separate lines representing the East Coast, Midwest, and West Coast regions in the United States.",
        "synthesizer_name":"single_hop_specifc_query_synthesizer"
    }

    {
        "user_input":"How can I learn to include donut multiples charts in Looker?",
        "reference_contexts":[
            "When you create donut multiples charts, make sure there is uniformity and cohesive patterns across categories to highlight their relationship. Additionally, to ensure clarity and viewer understanding, include clear, cumulative material in the center of the chart to highlight the nuance of each particular donut multiples chart. The following donut multiples chart shows quarterly product sales for multiple categories of clothing: jeans, leggings, outerwear and coats, and shorts. There is a separate donut chart for each quarterly sale. This visualization highlights how each individual clothing category, represented by a uniform color, contributes to overall product sales per quarter. To learn how to include donut multiples charts in Looker, see the Donut multiples chart options documentation page. Progression charts Progression charts highlight information that appears over time. Through these charts, you can highlight this context and how it impacts the data. Progression charts track overall progress and growth. This section contains examples of the following progression charts: Funnel Best for visualizing sequential stages. Funnel charts are progression charts that highlight sequential stages. This type of chart has similarities with bar charts, which also represent data through horizontal, rectangular visualizations. This chart creates a funnel shape through the stacked visualizations. For an effective funnel chart, make sure that the data includes at least four stages. This will ensure a strong visual impact and highlight the process represented as a whole. If you have fewer than four components, consider using another type of visualization, such as a pie chart. The following funnel visualization highlights five separate stages of customer actions and the percentage values at each stage. The stages, in descending order, are product, cart, purchase, register, and cancel, representing the customers' engagement with the product. See the Funnel chart options documentation page to learn more about creating this visualization in Looker. Timeline Best for visualizing progression of time. Timeline charts highlight the progression of time by including key events and markers over a set duration. While timeline charts often relate to time, this chart structure can also be applied to numbers and amounts as well. With the customization of color, multiple timelines can be used on one graph to show how multiple factors vary through progression. For timeline patterns, specifically in Looker, color customization can vary by pallete. Your timeline can have a continuous palette, which reflects a gradient option with two variables on either portion of the gradient. You can also have a categorical palette, meaning that each color represents a category in the data. You can learn more about this color customization and timeline charts in the Timeline chart options documentation page. The following timeline visualization represents specific order ID numbers and their respective average days to process over months in 2022. The timeline uses a continuous gradient pallette to represent the varying numbers of days. Waterfall Best for visualizing sequential positive and negative values. Waterfall charts highlight the relationship between positive and negative values through a sequence. These charts show how a starting value evolves due to various factors. Waterfall charts mirror design elements of a bar chart. Like many other visualization types, time-based markers or category-based markers can structure waterfall charts, depending on your particular dataset. As waterfall charts work specifically with positive and negative values, clear definition between these two categories is essential. Through color use and text labels, make sure that the visualization clearly differentiates the values in your data. The following waterfall chart example shows total revenue across stages of the ordering process, including cancelled, returned, shipped, and processing. There is also a total amount calculated. See the Waterfall chart options documentation page for further details about this visualization type. Text and tables When you have meaningful text data to display, selecting text and table displays will highlight the impact of the words. The display of these words can vary \u2014 from highlighting a single value to displaying a complex arrangement of words throughout a dataset. This section includes some of the many examples of types of visualization for text and tables: * Single Record Single Value Best for visualizing an isolated piece of data. A single value chart highlights an individual value from a dataset. Visualizing a value in this way highlights its significance and importance to a larger dataset. When creating a single value chart, select a value that has significance to the audience and reflects your goals for the visualization. Additionally, ensure that the font family and size customization emphasize the value rather than distracting from or minimizing the data. The following single value example highlights the number of yearly customers from California, which is 118,126 people. See the Single Value chart options documentation page for more information about customizing this chart in Looker. Single Record Best for visualizing limited data pieces. Similarly to single value charts, single record charts also highlight selected limited data from a larger dataset to communicate a certain message. Single record charts contain more information than a single value chart, however. This visualization can provide an example from a larger dataset. Choosing an effective and relevant single record for this type of chart will highlight an example from a dataset. This chart can be customized for readability and clarity through font family and size and color usage. The following single record chart shows key information about a particular product, the \"100% Silk Woven Light Blue and Navy Striped Tie.\" This includes the product ID, category, and retail price. To learn more about creating these charts in Looker, see the Single Record chart options documentation page. Word Cloud Best for visualizing data frequency. Word clouds are data visualizations that display the frequency of data through the customization of font type, size, and color. The key structure of a word cloud is that the higher frequency of a particular word in an analyzed dataset, the larger the font size. Even with a simple glance or a quick scan from a viewer, a word cloud conveys relevant, recurring information in a dataset through a strong visual impact. Customization of spacing"
        ],
        "reference":"To learn how to include donut multiples charts in Looker, see the Donut multiples chart options documentation page.",
        "synthesizer_name":"single_hop_specifc_query_synthesizer"
    }

    {
        "user_input":"Can you tell me about the data distribution of products sold from January 2021 to July 2022, as shown in a boxplot?",
        "reference_contexts":[
            "and horizontal and vertical alignment type can achieve this visual impact. In some word clouds, creators group similar thematic words by a certain color, highlighting the connected nature of certain elements. This grouping of words by color can also help contextualize the content for the reader and understand the information being provided. The following example word cloud highlights the state locations of customers. The state names are sized by the number of customers in each state, California being the state with the greatest number of customers. To learn about how Looker specifically fuels intuitive word cloud creation through Style menu options, see the Word Cloud chart options documentation page. Maps Mapping visualization contextualizes data as it relates to location, making it a useful visualization type if your data relates specifically to geographic regions. The geographic scope of your visualization can be customized in a way that best reflects your collected data. This can include specifying your location through longitude, latitude, and even zip code, depending on your project. Interactive maps adjust and reconfigure based on customization, while static maps remain consistent once configured. This section specifically addresses the following geographic visualizations: * Google Maps * * Static Map (Regions) * Static Map (Points) Google Maps Best for visualizing geographic data with heatmaps. Google Maps, Google's web mapping platform, shares geographic information interactively with an audience. With the Google Maps feature in Looker, you can customize the appearance of your map with multiple styles, such as through the Light , Dark , Satellite , Streets , and Outdoors. These styles can highlight your information in different ways depending on the scope and focus of your data. Additionally, the Google Maps visualization allows for heatmap implementation. Heatmaps display information using a color-coded system that indicates data frequency. The following heatmap Google Maps visualization displays the number of products sold per month in zip codes throughout the United States. The heatmap ranges from 9 to 66 products sold, with a gradient from green to orange that represents this number range. For navigating through this map, keyboard shortcuts are also available. To learn more about the Google Maps feature, see the Google Maps chart options documentation page. Map Best for visualizing interactive geographic data. Interactive map visualizations apply geographic imagery to represent how your data corresponds to a specific location and region. Interactive maps can reflect many other visualization types by combining design aspects. This can include using points, lines, or areas to signify markers in your visualization. Design of the overall map also can be customized. In Looker specifically, map styles include Light , Dark , and Satellite options. Each of these options have a no labels feature as well. This setting omits key details like city and street names to focus more specifically on the data than on the specifics of the map. When you're choosing a map design, consider the important details for the user to consider, and choose a design that best reflects those details. The following chart highlights the number of users across zip codes in the United States through a gradient color-coding system. This interactive map allows for zooming features to focus on particular regions of the map. Learn more about interactive maps in Looker through the Map chart options documentation page. Static Map (Regions) Best for visualizing regional data. Static maps by region chart how a particular region is impacted by data. Because the map is static, it cannot change or adjust based on user interaction. This type of visualization is helpful for portraying a distinct circumstance rather than a changing, evolving process over time. The following regional static map represents the number of store locations in each state in the United States. Through a blue gradient, the darkest blue color represents the largest numbers of store locations. This color usage of this map is not quantized; for greater contrast between states, the Quantize Color switch in the Style menu can be enabled. Learn more about this kind of map in Looker through the Static Map (Regions) chart options documentation page. Static Map (Points) Best for visualizing geographic point-specific data. Static maps with points mirror static points with regions. However, these maps visualize through points that overlap across regions. Depending on your focus of your data, this visualization type could be helpful, particularly if there are not clear regional divides with your datasets. The following static map with points includes points that are sized by number of customers in zip codes throughout the United States. Learn more about this kind of map in Looker through the Static Map (Points) chart options documentation page. Other charts Other popular data visualization types available in Looker extend beyond these categories. These additional specific forms of visualization allow for added customization depending on your audience for your data interpretation. This section includes the following chart examples: * Custom visualizations Boxplot Best for visualizing data distribution through statistical summary. Like scatterplot charts, boxplot charts are also effective for highlighting data distribution. Boxplot charts show this through a statistical summary, or a way of grouping data through observations and patterns. There is a five-number statistical summary for a box plot chart, dividing the data based on the minimum, the maximum, the sample median, and the first and third quartiles. The increased size of a box plot signifies an increased distribution of the data. The following boxplot chart example highlights the data distribution of products sold from January 2021 to July 2022. Each monthly entry displays, on hover, the minimum, medium, and maximum products sold. To learn more about boxplots and customizing them in Looker, see the Boxplot chart options documentation page. Custom visualizations In addition to the existing visualizations available in Looker, you can also create custom visualization to display your data. You can implement custom visualizations in these ways: * Adding the custom visualization to create custom visualizations with the visualization parameter in the project manifest file * Installing the visualization from the Looker Marketplace directly * Installing the visualization from the"
        ],
        "reference":"The boxplot chart example highlights the data distribution of products sold from January 2021 to July 2022. Each monthly entry displays, on hover, the minimum, medium, and maximum products sold.",
        "synthesizer_name":"single_hop_specifc_query_synthesizer"
    }

    {
        "user_input":"How can Looker Actions facilitate data sharing with third-party services, and what are the different types of actions available for delivering Looker content?",
        "reference_contexts":[
            "<1-hop>\n\nSharing data through an action hub | Looker | Google Cloud Source: https:\/\/cloud.google.com\/looker\/docs\/action-hub Skip to main content * English * Deutsch * Espa\u00f1ol \u2013 Am\u00e9rica Latina * Fran\u00e7ais * Indonesia * Italiano * Portugu\u00eas \u2013 Brasil * \u4e2d\u6587 \u2013 \u7b80\u4f53 * \u4e2d\u6587 \u2013 \u7e41\u9ad4 Console Sign in Send feedback Sharing data through an action hub Stay organized with collections Save and categorize content based on your preferences. In addition to delivering content to Looker's built-in destinations, you can use actions \u2014 also called integrations \u2014 to deliver content to third-party services that are integrated with Looker through an action hub server. This page will walk you through your options for building custom actions that you can request to add to the Looker Action Hub or add to your own private action hub server. This page also describes how to spin up a local action hub server to test your custom actions or run a private action hub server. To get started using actions, you can either: * Use Looker's existing actions available from the Looker Action Hub. * Build and publish a custom action to the Looker Action Hub for public use. * Build and publish a custom action to a private action hub server for private use. Once the action is added to the action hub, a Looker admin can enable the action for use in delivering Looker content to those services. You can also set up multiple action hubs if you would like to use Looker's integrations through the Looker Action Hub and also host your own private or custom actions. The actions for each action hub would appear on the Actions page of the Admin panel. The Looker Action Hub Looker hosts and provides the Looker Action Hub, a stateless server that implements Looker's Action API and exposes popular actions. Any data that your users send using an action will be processed temporarily on the Looker Action Hub server rather than in your Looker instance. Looker is already integrated with several services. See the Admin settings - Actions documentation page to learn how to enable these existing services. Looker Action Hub requirements The Looker Action Hub must be able to send and receive API requests in the following ways: * From the Looker instance to the Looker Action Hub network * From the Looker user's browser to the Looker Action Hub network * From the Looker Action Hub network to the Looker instance If your Looker deployment cannot accommodate these requests or if the IP Allowlist feature is enabled on your Looker instance, consider setting up a local action hub server to serve private Looker integrations or custom actions. Admins of customer-hosted instances can also deploy a local action server specifically for OAuth and streaming actions. Requests from the Looker instance to the Looker Action Hub network Requests to actions.looker.com resolve to a dynamic IP address. Outgoing requests from the Looker instance must be able to reach the following endpoints: actions.looker.com\/ actions.looker.com\/actions\/<name>\/execute actions.looker.com\/actions\/<name>\/form where name is the programmatic name of the action. Requests from the Looker user's browser to the Looker Action Hub network The Looker user's browser must be able to make requests to the following Looker Action Hub endpoints (for OAuth): actions.looker.com\/actions\/<name>\/oauth where name is the programmatic name of the action. Requests from the Looker Action Hub network to the Looker instance The Looker Action Hub must make requests to the Looker instance for actions that support streamed results or that use OAuth. A streaming action enables the action to consume queries that deliver All Results. OAuth-enabled actions use per-user authentication through OAuth 2.0 flows. OAuth actions must store user credentials in their source Looker instance because the Looker Action Hub is stateless and multi-tenant, and it will not store user-specific credentials of any kind. The requests from the Looker Action Hub to a Looker instance take the following forms: GEThost_looker_url>\/downloads\/<random_40_char_token> POSThost_looker_url>\/action_hub_state\/<random_40_char_token> These URLs are generated on the spot in the Looker instance before being sent to the Looker Action Hub. For this reason, the Looker Action Hub needs to be able to both resolve the <host_looker_url> to an IP address and make requests into the network in which your Looker instance resides. The Looker Action Hub has static egress IP addresses that the requests will always come from: 35.153.89.114, 104.196.138.163, and 35.169.42.87. Admins of Looker-hosted instances who have enabled the IP allowlist must add these IP addresses to use any actions that support streamed results or that use OAuth.",
            "<2-hop>\n\nan entire query. The Segment action, for example, is a query-level action. * A cell-level action: A cell-level action sends the value of a single, specific cell in a data table. This action type is different from data actions, which can be defined for dimensions or measures using the action parameter. To send information from a specific cell within a table, Looker uses tags to map actions to the corresponding cells. Actions need to specify which tags they support in requiredFields. To map actions and fields, fields in LookML need to specify which tags they are mapped to with the LookML tags parameter. For example, the Twilio Message action uses a phone tag so that LookML developers can control on which phone number fields the Twilio action will appear. * A dashboard-level action: A dashboard-level action supports sending an image of a dashboard. For example, the SendGrid action sends dashboard images through email. Adding user attributes to custom actions For custom actions, you can add user attributes in the params parameter of your action file. If the parameter is required, then each user must have a value for this attribute defined in their user account or for a user group they belong to, in addition to the send_to_integration permission, to see the action as a destination option when sending or scheduling content. To add a user attribute to your action: 1. A Looker admin may need to create the user attribute that corresponds to the user_attribute_param if it does not already exist. 2. Define a valid value for the user attribute for the users or user groups that need to deliver content to your action destination. (These users must also have send_to_integration permissions.) 3. The params parameter represents the form fields that a Looker admin must configure on the action's enablement page from the Actions list in the Admin panel. In the params parameter of your action file, include the following: params = [{ description: \"A description of the param.\", label: \"A label for the param.\", name: \"action_param_name\", user_attribute_name: \"user_attribute_name\", required: true, sensitive: true, }] where user_attribute_name is the user attribute that is defined in the Name field on the User Attributes page in the Users section of the Admin panel, required: true means that a user must have a non-null and valid value defined for that user attribute to see the action when data is being delivered, and sensitive: true means that the user attribute is encrypted and never displayed in the Looker UI once it is entered. You can specify multiple user attribute subparameters. 1. Deploy your updates to the action hub server. * If you are adding a new action, a Looker admin will need to enable the action by clicking the Enable button next to the action on the Actions page in the Admin panel. * If you are updating an existing action, refresh your list of actions by clicking the Refresh button. Next, click the Settings button. 2. On the action settings\/enablement page, a Looker admin must configure the action's form fields to pull information from the user attribute by clicking the user attribute icon to the right of the appropriate field and selecting the desired user attribute. requiredField parameters in cell-level actions For cell-level actions, you can configure your model's LookML fields to deliver data to that action destination by specifying which tags your action supports in the requiredFields parameter of your action file. Parameter | Required | Description | Data Type ---|---|---|--- tag | No | If present, matches a field that has this tag. | string any_tag | No | If present, supersedes tag and matches a field that has any of the provided tags. | string all_tags | No | If present, supersedes tag and matches a field that has all the provided tags. | string Supported data formats The DataActionRequest class defines what data delivery format is available for the action to work with. For query-level actions, the request will contain an attachment that can be in several formats. The action can either specify one or more supportedFormats or let the user choose the format by specifying all possible formats. For cell-level actions, the value of the cell will be present on DataActionRequest. Configuring an action for OAuth You can configure your action so that users can authenticate into the action with OAuth. Even though the Looker Action Hub must remain stateless, you can enforce a state through a form request from the Looker Action API. Looker action OAuth flow For actions in the Looker Action Hub, you can extend an OAuthAction instead of a Hub.Action to set a Boolean that indicates which OAuth methods are needed to authenticate a user into an action. For every OAuth-enabled or state-enabled action, Looker stores a per-user, per-action state, so that each action and user combination has an independent OAuth event. The flow for creating actions typically involves a \/form request followed by a \/execute request. For OAuth, the \/form request should have a method to determine if the user is authenticated within the target service. If the user is already authenticated, the action should return a normal \/form in accordance with whatever the \/execute request requires. If the user is not authenticated, the action returns a link that will initialize an OAuth flow. Saving state with the OAuth URL Looker will send an HTTP POST request with an empty body to the ActionList endpoint. If the action returns uses_oauth: true in its definition, then the action will be sent a one-time-use state_url in every \/form request from Looker. The state_url is a special one-time-use URL that sets a user's state for a given action. If the user is not authenticated with the endpoint, the \/form returned should contain a form_field of type oauth_link that goes to the \/oauth endpoint of an action. The state_url should be encrypted and saved as a state param in the oauth_url that is returned. For example: { \"name\":\"login\", \"type\":\"oauth_link\", \"label\":\"Log in\", \"description\":\"OAuth Link\", \"oauth_url\":\"ACTIONHUB_URL\/actions\/my_action\/oauth?state=encrypted_state_url\" } In this"
        ],
        "reference":"Looker Actions, also known as integrations, enable data sharing with third-party services through an action hub server. These actions can be used to deliver Looker content to various services. There are three main types of actions: query-level actions, which can send an entire query; cell-level actions, which send the value of a single cell in a data table and use tags to map actions to cells; and dashboard-level actions, which support sending an image of a dashboard.",
        "synthesizer_name":"multi_hop_abstract_query_synthesizer"
    }

    {
        "user_input":"How can customer-hosted Looker instances ensure communication with third-party services via the Looker Action Hub when bi-directional communication is not possible?",
        "reference_contexts":[
            "<1-hop>\n\nSharing data through an action hub | Looker | Google Cloud Source: https:\/\/cloud.google.com\/looker\/docs\/action-hub Skip to main content * English * Deutsch * Espa\u00f1ol \u2013 Am\u00e9rica Latina * Fran\u00e7ais * Indonesia * Italiano * Portugu\u00eas \u2013 Brasil * \u4e2d\u6587 \u2013 \u7b80\u4f53 * \u4e2d\u6587 \u2013 \u7e41\u9ad4 Console Sign in Send feedback Sharing data through an action hub Stay organized with collections Save and categorize content based on your preferences. In addition to delivering content to Looker's built-in destinations, you can use actions \u2014 also called integrations \u2014 to deliver content to third-party services that are integrated with Looker through an action hub server. This page will walk you through your options for building custom actions that you can request to add to the Looker Action Hub or add to your own private action hub server. This page also describes how to spin up a local action hub server to test your custom actions or run a private action hub server. To get started using actions, you can either: * Use Looker's existing actions available from the Looker Action Hub. * Build and publish a custom action to the Looker Action Hub for public use. * Build and publish a custom action to a private action hub server for private use. Once the action is added to the action hub, a Looker admin can enable the action for use in delivering Looker content to those services. You can also set up multiple action hubs if you would like to use Looker's integrations through the Looker Action Hub and also host your own private or custom actions. The actions for each action hub would appear on the Actions page of the Admin panel. The Looker Action Hub Looker hosts and provides the Looker Action Hub, a stateless server that implements Looker's Action API and exposes popular actions. Any data that your users send using an action will be processed temporarily on the Looker Action Hub server rather than in your Looker instance. Looker is already integrated with several services. See the Admin settings - Actions documentation page to learn how to enable these existing services. Looker Action Hub requirements The Looker Action Hub must be able to send and receive API requests in the following ways: * From the Looker instance to the Looker Action Hub network * From the Looker user's browser to the Looker Action Hub network * From the Looker Action Hub network to the Looker instance If your Looker deployment cannot accommodate these requests or if the IP Allowlist feature is enabled on your Looker instance, consider setting up a local action hub server to serve private Looker integrations or custom actions. Admins of customer-hosted instances can also deploy a local action server specifically for OAuth and streaming actions. Requests from the Looker instance to the Looker Action Hub network Requests to actions.looker.com resolve to a dynamic IP address. Outgoing requests from the Looker instance must be able to reach the following endpoints: actions.looker.com\/ actions.looker.com\/actions\/<name>\/execute actions.looker.com\/actions\/<name>\/form where name is the programmatic name of the action. Requests from the Looker user's browser to the Looker Action Hub network The Looker user's browser must be able to make requests to the following Looker Action Hub endpoints (for OAuth): actions.looker.com\/actions\/<name>\/oauth where name is the programmatic name of the action. Requests from the Looker Action Hub network to the Looker instance The Looker Action Hub must make requests to the Looker instance for actions that support streamed results or that use OAuth. A streaming action enables the action to consume queries that deliver All Results. OAuth-enabled actions use per-user authentication through OAuth 2.0 flows. OAuth actions must store user credentials in their source Looker instance because the Looker Action Hub is stateless and multi-tenant, and it will not store user-specific credentials of any kind. The requests from the Looker Action Hub to a Looker instance take the following forms: GEThost_looker_url>\/downloads\/<random_40_char_token> POSThost_looker_url>\/action_hub_state\/<random_40_char_token> These URLs are generated on the spot in the Looker instance before being sent to the Looker Action Hub. For this reason, the Looker Action Hub needs to be able to both resolve the <host_looker_url> to an IP address and make requests into the network in which your Looker instance resides. The Looker Action Hub has static egress IP addresses that the requests will always come from: 35.153.89.114, 104.196.138.163, and 35.169.42.87. Admins of Looker-hosted instances who have enabled the IP allowlist must add these IP addresses to use any actions that support streamed results or that use OAuth.",
            "<2-hop>\n\nConsiderations for customer-hosted instances To use Looker integrations, the Looker Action Hub must be able to communicate with the Looker instance and fulfill the Looker Action hub requirements. This is not always possible with customer-hosted Looker instances, for various reasons. If bi-directional communication between the Looker Action Hub and the Lookerinstance is not possible, the Looker Action Hub may exhibit unexpected or undesirable behavior, such as hanging queries or unavailable actions. To address the potential issue of the Looker Action Hub not being able to communicate with the Looker instance, Looker admins can implement one of the solutions shown later on this page. The appropriate solution or combination of solutions will depend on the architecture of the Looker instance: * If the customer-hosted instance is not resolvable by the Looker Action Hub \u2014 that is, the Looker Action Hub cannot receive requests from the Looker instance \u2014 Looker admins can contact a Google Cloud sales specialist to enable the public_host_url license feature. That license feature reveals the --public-host-url startup option, which lets admins specify a resolvable <public_host_url> hostname that is different from the instance <host_looker_url>. The public_host_url overrides the hostname for some specific Looker Action Hub callback URLs and routes those callback URLs through a reverse proxy that has the public_host_url as a publicly resolvable name. This reverse proxy accepts requests only from the static egress IP addresses for the Looker Action Hub; Looker admins who use this method must add to the allowlist the egress IP addresses from which the Looker Action Hub makes requests to the Looker instance: 35.153.89.114, 104.196.138.163, and 35.169.42.87. * If the customer-hosted instance URL is resolvable by the Looker instance but the Looker Action Hub cannot send requests to the Looker instance, users may be unable to configure or use actions that support streamed results or that use OAuth. To solve this, Looker admins must add to the allowlist the egress IP addresses from which the Looker Action Hub makes requests to the Looker instance: 35.153.89.114, 104.196.138.163, and 35.169.42.87. * If neither of the aforementioned solutions is appropriate for the Looker instance architecture, Looker admins can deploy a customer-hosted action hub for all actions or just for actions that support streamed results or that use OAuth. * To deploy a customer-hosted action hub, you must ensure that the JAR file is hosted on a public server so that the Looker Action Hub can communicate with it. This solution is not recommended, however. Additionally, the OAuth and streaming actions might not be usable on a customer-hosted Looker instance if the instance uses an SSL certificate that is issued by a Certificate Authority (CA) that is not on this list of root certificates."
        ],
        "reference":"For customer-hosted Looker instances where bi-directional communication with the Looker Action Hub is not possible, several solutions can be implemented. If the instance is not resolvable by the Looker Action Hub, admins can enable the public_host_url license feature, which allows specifying a publicly resolvable hostname that routes callback URLs through a reverse proxy. This proxy must be configured to accept requests only from the Looker Action Hub's static egress IP addresses (35.153.89.114, 104.196.138.163, and 35.169.42.87), which also need to be allowlisted. If the instance URL is resolvable but the Action Hub cannot send requests to it, admins must allowlist the same egress IP addresses. Alternatively, a customer-hosted action hub can be deployed for all actions or specifically for those supporting streamed results or OAuth, though hosting the JAR file on a public server is required and not recommended. Issues may also arise if the instance uses an SSL certificate from a Certificate Authority not on the list of root certificates.",
        "synthesizer_name":"multi_hop_abstract_query_synthesizer"
    }

    {
        "user_input":"How can I develop and test a custom action for the Looker Action Hub, and what are the key considerations for customer-hosted instances to ensure proper integration and functionality, especially regarding data sharing and actionability?",
        "reference_contexts":[
            "<1-hop>\n\nSharing data through an action hub | Looker | Google Cloud Source: https:\/\/cloud.google.com\/looker\/docs\/action-hub Skip to main content * English * Deutsch * Espa\u00f1ol \u2013 Am\u00e9rica Latina * Fran\u00e7ais * Indonesia * Italiano * Portugu\u00eas \u2013 Brasil * \u4e2d\u6587 \u2013 \u7b80\u4f53 * \u4e2d\u6587 \u2013 \u7e41\u9ad4 Console Sign in Send feedback Sharing data through an action hub Stay organized with collections Save and categorize content based on your preferences. In addition to delivering content to Looker's built-in destinations, you can use actions \u2014 also called integrations \u2014 to deliver content to third-party services that are integrated with Looker through an action hub server. This page will walk you through your options for building custom actions that you can request to add to the Looker Action Hub or add to your own private action hub server. This page also describes how to spin up a local action hub server to test your custom actions or run a private action hub server. To get started using actions, you can either: * Use Looker's existing actions available from the Looker Action Hub. * Build and publish a custom action to the Looker Action Hub for public use. * Build and publish a custom action to a private action hub server for private use. Once the action is added to the action hub, a Looker admin can enable the action for use in delivering Looker content to those services. You can also set up multiple action hubs if you would like to use Looker's integrations through the Looker Action Hub and also host your own private or custom actions. The actions for each action hub would appear on the Actions page of the Admin panel. The Looker Action Hub Looker hosts and provides the Looker Action Hub, a stateless server that implements Looker's Action API and exposes popular actions. Any data that your users send using an action will be processed temporarily on the Looker Action Hub server rather than in your Looker instance. Looker is already integrated with several services. See the Admin settings - Actions documentation page to learn how to enable these existing services. Looker Action Hub requirements The Looker Action Hub must be able to send and receive API requests in the following ways: * From the Looker instance to the Looker Action Hub network * From the Looker user's browser to the Looker Action Hub network * From the Looker Action Hub network to the Looker instance If your Looker deployment cannot accommodate these requests or if the IP Allowlist feature is enabled on your Looker instance, consider setting up a local action hub server to serve private Looker integrations or custom actions. Admins of customer-hosted instances can also deploy a local action server specifically for OAuth and streaming actions. Requests from the Looker instance to the Looker Action Hub network Requests to actions.looker.com resolve to a dynamic IP address. Outgoing requests from the Looker instance must be able to reach the following endpoints: actions.looker.com\/ actions.looker.com\/actions\/<name>\/execute actions.looker.com\/actions\/<name>\/form where name is the programmatic name of the action. Requests from the Looker user's browser to the Looker Action Hub network The Looker user's browser must be able to make requests to the following Looker Action Hub endpoints (for OAuth): actions.looker.com\/actions\/<name>\/oauth where name is the programmatic name of the action. Requests from the Looker Action Hub network to the Looker instance The Looker Action Hub must make requests to the Looker instance for actions that support streamed results or that use OAuth. A streaming action enables the action to consume queries that deliver All Results. OAuth-enabled actions use per-user authentication through OAuth 2.0 flows. OAuth actions must store user credentials in their source Looker instance because the Looker Action Hub is stateless and multi-tenant, and it will not store user-specific credentials of any kind. The requests from the Looker Action Hub to a Looker instance take the following forms: GEThost_looker_url>\/downloads\/<random_40_char_token> POSThost_looker_url>\/action_hub_state\/<random_40_char_token> These URLs are generated on the spot in the Looker instance before being sent to the Looker Action Hub. For this reason, the Looker Action Hub needs to be able to both resolve the <host_looker_url> to an IP address and make requests into the network in which your Looker instance resides. The Looker Action Hub has static egress IP addresses that the requests will always come from: 35.153.89.114, 104.196.138.163, and 35.169.42.87. Admins of Looker-hosted instances who have enabled the IP allowlist must add these IP addresses to use any actions that support streamed results or that use OAuth.",
            "<2-hop>\n\nBuilding a custom action This section describes the steps to follow to write and test a custom action using the Looker Action Hub source code. To see functional code examples, check the existing actions in the looker-open-source\/actions repo in GitHub. You can create a custom action by: 1. Setting up a development repo 2. Writing your action 3. Testing your action 4. Publishing and enabling your action, either in the Looker Action Hub or on your own private action hub server As with any action, you may need to configure your LookML models with specific parameters before you can use the action to deliver your data. Setting up a development repo The Looker Action Hub is a Node.js server written in TypeScript, a small layer on top of modern JavaScript that adds type information to help catch programming errors. If you're familiar with JavaScript, most of the TypeScript language should be familiar to you. Running the Looker Action Hub requires the following software: * Node Version Manager (NVM \u2014 to select the proper Node.js version) * Yarn (to manage dependencies) Once you've installed the required software, you're ready to set up your development environment. The following example uses Git. 1. Clone the looker-open-source\/actions repo locally: gitclonegit@github.com:looker-open-source\/actions.git Create a directory with the name of your action in the actions\/src\/actions directory. For example: mkdir actions\/src\/actions\/my_action Start populating your directory with the files you'll need to execute your action. See the actions GitHub repo for an example file structure. Looker recommends that you also add the following: * A README to explain the purpose and means of authentication for your action * A PNG icon to display in the Looker Action Hub (or private action hub on your Looker instance) and in the Looker data delivery windows * Any files for tests you want to run on your action code \u2014 this is different from testing your action Writing an action A design requirement for the Looker Action Hub server is that it remain completely stateless, so storing any information in the action application or service is not allowed. Any information needed to fulfill the action must be provided within the action file's request calls. The exact contents of the action file will vary depending on the service, the type or level at which the action operates, and what data or visualization formats need to be specified. The action can also be configured for OAuth 2.0 authorization flows. Action files are based on the \/execute API method. Looker API requests are passed a DataActionRequest each time a user executes the action within Looker. The DataActionRequest contains all the data and metadata that are needed to execute your action. A \/form method is also available, which can be used to collect additional information from the user before they execute the action. The fields that you specify in the \/form will appear in the Send or Schedule pop-up when users select the action as a destination for their data delivery. When writing your action file, include at least the following parameters marked Required in your action definition: Parameter | Required | Description | Data type ---|---|---|--- name | Yes | A unique name for the action. This should be unique across all actions in the Looker Action Hub. | string url | Yes | An absolute URL of the \/execute endpoint for this action. | string label | Yes | A human-readable label for the action. | string supportedActionTypes | Yes | A list of action types the action supports. Valid values are \"cell\", \"query\", and \"dashboard\". | string formURL | No | An absolute URL of the \/form endpoint for this action. | string description | No | Description of the action. | string params | No | Array of parameters for the action. Include the name, label, and description in string format for each parameter. These are the fields that appear on the action's enablement page in the Admin panel. To manage how users can deliver data to an action destination, you can specify a user attribute for which a user must have a defined value. | parameters No | A list of data formats the action supports. Valid values are \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", and \"wysiwyg_png\".` | stringsupportedFormattings| No | A list of formatting options the action supports. Valid values are\"formatted\"and\"unformatted\". | stringsupportedVisualizationFormattings| No | A list of visualization formatting options the action supports. Valid values are\"apply\"and\"noapply\". | stringiconName| No | A Data URI representing an icon image for the action. | string No | A list of descriptions of required fields that this action is compatible with. If there are multiple entries in this list, the action requires more than one field. |RequiredFieldsupportedDownloadSettings| No | A Boolean that determines whether the action will be sent a one-time-use download URL to facilitate unlimited streaming of data. The parameter is set by theusesStreamingparameter, which is atrue\/falseBoolean. IfusesStreaming = true, thensupportedDownloadSettings = url. IfusesStreaming = false, thensupportedDownloadSettings = push. | Boolean No | A Boolean that determines whether the action is an OAuth action. This will determine whether the action will be sent a one-time-use link to be able to setstatefor a specific user for this action. | BooleanusesStreaming| No | A Boolean that determines whether the action supports streamed query results. Check the **Uses data streaming (Yes\/No)** column in the list of integrated services. Actions that stream results may require configuration of a local action hub server \u2014 see the Setting up a local action hub for actions that use OAuth or streaming Best Practices page for more information. | BooleanminimumSupportedVersion` | No | The minimum Looker version in which the action will appear in the Admin panel Action Hub list. | string Examples from the Looker Action Hub actions are on GitHub for reference. Supported action types Looker supports three types of actions, as specified in the supportedActionTypes parameter of your action: query, cell, and dashboard. * A query-level action: This is an action that sends",
            "<3-hop>\n\nConsiderations for customer-hosted instances To use Looker integrations, the Looker Action Hub must be able to communicate with the Looker instance and fulfill the Looker Action hub requirements. This is not always possible with customer-hosted Looker instances, for various reasons. If bi-directional communication between the Looker Action Hub and the Lookerinstance is not possible, the Looker Action Hub may exhibit unexpected or undesirable behavior, such as hanging queries or unavailable actions. To address the potential issue of the Looker Action Hub not being able to communicate with the Looker instance, Looker admins can implement one of the solutions shown later on this page. The appropriate solution or combination of solutions will depend on the architecture of the Looker instance: * If the customer-hosted instance is not resolvable by the Looker Action Hub \u2014 that is, the Looker Action Hub cannot receive requests from the Looker instance \u2014 Looker admins can contact a Google Cloud sales specialist to enable the public_host_url license feature. That license feature reveals the --public-host-url startup option, which lets admins specify a resolvable <public_host_url> hostname that is different from the instance <host_looker_url>. The public_host_url overrides the hostname for some specific Looker Action Hub callback URLs and routes those callback URLs through a reverse proxy that has the public_host_url as a publicly resolvable name. This reverse proxy accepts requests only from the static egress IP addresses for the Looker Action Hub; Looker admins who use this method must add to the allowlist the egress IP addresses from which the Looker Action Hub makes requests to the Looker instance: 35.153.89.114, 104.196.138.163, and 35.169.42.87. * If the customer-hosted instance URL is resolvable by the Looker instance but the Looker Action Hub cannot send requests to the Looker instance, users may be unable to configure or use actions that support streamed results or that use OAuth. To solve this, Looker admins must add to the allowlist the egress IP addresses from which the Looker Action Hub makes requests to the Looker instance: 35.153.89.114, 104.196.138.163, and 35.169.42.87. * If neither of the aforementioned solutions is appropriate for the Looker instance architecture, Looker admins can deploy a customer-hosted action hub for all actions or just for actions that support streamed results or that use OAuth. * To deploy a customer-hosted action hub, you must ensure that the JAR file is hosted on a public server so that the Looker Action Hub can communicate with it. This solution is not recommended, however. Additionally, the OAuth and streaming actions might not be usable on a customer-hosted Looker instance if the instance uses an SSL certificate that is issued by a Certificate Authority (CA) that is not on this list of root certificates.",
            "<4-hop>\n\nexample, the \/oauth endpoint redirects the user to the authentication server. The \/oauth endpoint constructs the redirect in the oauthUrl(...) method on an OAuth action, as shown in the Dropbox OauthUrl. The state param containing that encrypted state_url should be passed to the Looker Action Hub. Saving state with the action hub redirect URI In the \/oauth endpoint, a redirect_uri for the action hub is also created and passed to the action's oauthUrl(...) method. This redirect_uri is of the form \/actions\/src\/actions\/my_maction\/oauth_redirect and is the endpoint used if the authentication returns a result. This endpoint will call the oauthFetchInfo(...) method, which should be implemented by the OauthAction method to extract the necessary information and attempt to receive or save any state or auth received from the authentication server. The state decrypts the encrypted state_url and uses it to POST state back to Looker. The next time that a user makes a request to that action, the newly saved state will be sent to the Looker Action Hub. Adding your action files to the Looker Action Hub repo Once your action file is written, in the Looker Action Hub repo: 1. Add the action file (for example, my_action.ts) to actions\/src\/actions\/index.ts. import\".\/my_action\/my_action.ts\" Add any Node.js package requirements that you utilized in the writing of your action. For example: yarn add aws-sdk yarn add express Install the Node.js dependencies of the Looker Action Hub server. yarn install Run any tests you wrote. yarn test Testing an action For complete testing, you can try your action against your Looker instance by hosting a private action hub server. This server needs to be on the public internet with a valid SSL certificate and must be able to initiate and receive connections or HTTPS requests to and from Looker. For this, you can use a cloud-based platform such as Heroku, as shown in the following example. Alternatively, you can use any platform that satisfies the aforementioned requirements. Setting up a local action hub server In this example, we will take the action we developed in the looker-open-source\/actions\/src\/actions GitHub repo and will be committing the code to a new Git branch. We recommend that you work on features using branches so that you can easily track your code and, if desired, easily create a PR with Looker. 1. To get started, create your branch and then stage and commit your work. For example: git checkout -b my-branch-name git add file-names git commit -m commit-message For this example, to push a branch to Heroku, configure your Git repo with Heroku as a remote option in your command line: heroku login heroku create git push heroku Heroku will return the public URL now hosting the action hub for your use. Visit the URL or run heroku logs to confirm that the action hub is running. If you forget the public URL, you can run the following in your command line: heroku info -s | grep web_url Heroku will return your public URL. For example: https:\/\/my-heroku-action-server-1234.herokuapp.com 4. In your command line, set your action hub base URL: heroku config:set ACTION_HUB_BASE_URL=\"https:\/\/my-heroku-action-server-1234.herokuapp.com\" Set your action hub label: heroku config:set ACTION_HUB_LABEL=\"Your Action Hub\" Looker uses an authorization token to connect to the action hub. Generate the token in your command line: heroku run yarn generate-api-key If you are not using Heroku, as we are in this example, instead use: yarn generate-api-key Heroku will return your authorization token. For example: Authorization: Token token=\"abcdefg123456789\" 7. Set your action hub secret using the secret key: heroku config:set ACTION_HUB_SECRET=\"abcdefg123456789\" Customer-hosted deployments may require configuration of additional environment variables not documented here. 8. Add your action on your local Looker instance by going to Admin > Actions. * At the bottom of the list of actions, click Add Action Hub. * Enter the Action Hub URL and, optionally, a Secret Key. * Find your action in the Actions list within Looker's Admin menu. * Click Enable. If your action requires that specific kinds of data be passed from Looker, be sure to configure any models to include the appropriate tags parameter. Now you're ready to test your action! Testing dashboard-level and query-level actions In your Looker instance, configure your LookML model with tags, if necessary. Create and save a Look. On the saved Look, click the upper-right menu and select Send with your action as the destination. If you have a form for delivery, Looker will render it in the Sent window. Click Send Test to deliver the data. The status of the action will appear in the Scheduler History in the Admin panel. If your action encounters an error, it will be shown in the Admin panel, and Looker will send an email with the error message to the user who sent the action. Testing cell-level actions Set up a LookML field with the proper tags for your action. In your Looker instance, run a query that includes that field. Find the field in the data table. Click the \u2026 in the cell and select Send from the drop-down menu. If you receive errors, you'll need to do a full refresh on the data table after you address those errors. * If your action is delivered without any errors, you're ready to publish your action! * If you want to keep hosting your action privately, you can publish to your private action hub. * If you want to publish your action for use by all Looker customers, see the section on Publishing to the Looker Action Hub.",
            "<5-hop>\n\nPublishing and enabling a custom action There are two publication options for custom actions: * Publishing to the Looker Action Hub: This makes your action available to anyone who uses Looker. * Publishing to a private action hub server: This makes your action available on your Looker instance only. Once your action is published, you can enable it from the Actions page in the Admin panel. Publishing to the Looker Action Hub This approach is the easiest and works for any action that you'd like to make available to anyone who uses Looker. After your action has been tested, you can submit a PR to the looker-open-source\/actions repo in GitHub. 1. Enter the following command: git push <your fork> <your development branch> Create your pull request with the looker-open-source\/actions repo as your target. Fill out the Looker Marketplace & Action Hub Submission Form. For more information about the form requirements, see Submitting content to the Looker Marketplace. Looker will review your action code. We reserve the right to decline your PR but can help you with any issues that you have and offer suggestions for improvement. We then merge the code into the looker-open-source\/actions repo and deploy it to actions.looker.com. Once the code is deployed, it will be available to all Looker customers. Enable the action in your Looker instance, so that it will appear as an option for data delivery. Publishing to a private action hub server If you have custom actions that are private to your company or use case, you should not add your action to the looker-open-source\/actions repo. Instead, create a private action hub using the same Node.js framework you used to test your action. You can set up your internal action hub server on your own infrastructure or using a cloud-based application platform (our example used Heroku). Don't forget to fork the Looker Action Hub to your private action hub server before deployment. Configuring a LookML model for use with an action For both custom actions and actions that are available from the Looker Action Hub, you must identify the relevant data fields by using the tags parameter in your LookML model. The Actions page in the Admin panel will provide information about the tags that are required for the service, if any. For example, a Twilio Send Message integration sends a message to a list of phone numbers. On the Actions page in the Admin panel, the integration displays the subtext \"Action can be used with queries that have a field tagged phone\". This means that the Twilio Send Message service requires a query that includes a phone number field and that uses the tags parameter to identify which field in the query contains phone numbers. You identify a phone number field in LookML by specifying tags: [\"phone\"] for that field. Your LookML for a phone number field might look like this: dimension: phone { tags: [\"phone\"] type: string sql: ${TABLE}.phone ;; } An integration that does not require tags will display the subtext \"Action can be used with any query\" on the Actions page in the Admin panel. Be sure to identify any required fields in your LookML model with the tags parameter so that your users can use the service to send data. What's next Learn how to deliver the contents of a Look or an Explore or of a dashboard to an integrated service. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and\/or its affiliates. Last updated 2025-07-26 UTC."
        ],
        "reference":"To develop a custom action for the Looker Action Hub, you need to set up a development repository, write your action, test it, and then publish it either to the Looker Action Hub or a private action hub server. The Looker Action Hub is a Node.js server written in TypeScript, and requires Node Version Manager (NVM) and Yarn. You'll need to clone the looker-open-source\/actions repo, create a directory for your action, and populate it with necessary files, including a README and an icon. When writing your action, it must be stateless, and any required information should be passed within the action file's request calls. Key parameters for the action file include a unique name, the URL of the \/execute endpoint, a human-readable label, and supported action types (cell, query, or dashboard). For customer-hosted instances, ensuring bi-directional communication between the Looker Action Hub and the Looker instance is crucial. If the instance is not resolvable by the Action Hub, enabling the public_host_url license feature can help. If the instance URL is resolvable but the Action Hub cannot send requests to it, or if neither of these solutions is appropriate, admins can deploy a customer-hosted action hub. For actions that support streamed results or use OAuth, specific configurations like allowing egress IP addresses (35.153.89.114, 104.196.138.163, and 35.169.42.87) might be necessary. Testing involves hosting a private action hub server, often using platforms like Heroku, and configuring your Looker instance to recognize it. You can then test query-level, cell-level, or dashboard-level actions by sending data from Looks or queries.",
        "synthesizer_name":"multi_hop_abstract_query_synthesizer"
    }

    {
        "user_input":"How can I share data using Looker Actions and what are the requirements for data sharing through an action hub server?",
        "reference_contexts":[
            "<1-hop>\n\nSharing data through an action hub | Looker | Google Cloud Source: https:\/\/cloud.google.com\/looker\/docs\/action-hub Skip to main content * English * Deutsch * Espa\u00f1ol \u2013 Am\u00e9rica Latina * Fran\u00e7ais * Indonesia * Italiano * Portugu\u00eas \u2013 Brasil * \u4e2d\u6587 \u2013 \u7b80\u4f53 * \u4e2d\u6587 \u2013 \u7e41\u9ad4 Console Sign in Send feedback Sharing data through an action hub Stay organized with collections Save and categorize content based on your preferences. In addition to delivering content to Looker's built-in destinations, you can use actions \u2014 also called integrations \u2014 to deliver content to third-party services that are integrated with Looker through an action hub server. This page will walk you through your options for building custom actions that you can request to add to the Looker Action Hub or add to your own private action hub server. This page also describes how to spin up a local action hub server to test your custom actions or run a private action hub server. To get started using actions, you can either: * Use Looker's existing actions available from the Looker Action Hub. * Build and publish a custom action to the Looker Action Hub for public use. * Build and publish a custom action to a private action hub server for private use. Once the action is added to the action hub, a Looker admin can enable the action for use in delivering Looker content to those services. You can also set up multiple action hubs if you would like to use Looker's integrations through the Looker Action Hub and also host your own private or custom actions. The actions for each action hub would appear on the Actions page of the Admin panel. The Looker Action Hub Looker hosts and provides the Looker Action Hub, a stateless server that implements Looker's Action API and exposes popular actions. Any data that your users send using an action will be processed temporarily on the Looker Action Hub server rather than in your Looker instance. Looker is already integrated with several services. See the Admin settings - Actions documentation page to learn how to enable these existing services. Looker Action Hub requirements The Looker Action Hub must be able to send and receive API requests in the following ways: * From the Looker instance to the Looker Action Hub network * From the Looker user's browser to the Looker Action Hub network * From the Looker Action Hub network to the Looker instance If your Looker deployment cannot accommodate these requests or if the IP Allowlist feature is enabled on your Looker instance, consider setting up a local action hub server to serve private Looker integrations or custom actions. Admins of customer-hosted instances can also deploy a local action server specifically for OAuth and streaming actions. Requests from the Looker instance to the Looker Action Hub network Requests to actions.looker.com resolve to a dynamic IP address. Outgoing requests from the Looker instance must be able to reach the following endpoints: actions.looker.com\/ actions.looker.com\/actions\/<name>\/execute actions.looker.com\/actions\/<name>\/form where name is the programmatic name of the action. Requests from the Looker user's browser to the Looker Action Hub network The Looker user's browser must be able to make requests to the following Looker Action Hub endpoints (for OAuth): actions.looker.com\/actions\/<name>\/oauth where name is the programmatic name of the action. Requests from the Looker Action Hub network to the Looker instance The Looker Action Hub must make requests to the Looker instance for actions that support streamed results or that use OAuth. A streaming action enables the action to consume queries that deliver All Results. OAuth-enabled actions use per-user authentication through OAuth 2.0 flows. OAuth actions must store user credentials in their source Looker instance because the Looker Action Hub is stateless and multi-tenant, and it will not store user-specific credentials of any kind. The requests from the Looker Action Hub to a Looker instance take the following forms: GEThost_looker_url>\/downloads\/<random_40_char_token> POSThost_looker_url>\/action_hub_state\/<random_40_char_token> These URLs are generated on the spot in the Looker instance before being sent to the Looker Action Hub. For this reason, the Looker Action Hub needs to be able to both resolve the <host_looker_url> to an IP address and make requests into the network in which your Looker instance resides. The Looker Action Hub has static egress IP addresses that the requests will always come from: 35.153.89.114, 104.196.138.163, and 35.169.42.87. Admins of Looker-hosted instances who have enabled the IP allowlist must add these IP addresses to use any actions that support streamed results or that use OAuth.",
            "<2-hop>\n\nan entire query. The Segment action, for example, is a query-level action. * A cell-level action: A cell-level action sends the value of a single, specific cell in a data table. This action type is different from data actions, which can be defined for dimensions or measures using the action parameter. To send information from a specific cell within a table, Looker uses tags to map actions to the corresponding cells. Actions need to specify which tags they support in requiredFields. To map actions and fields, fields in LookML need to specify which tags they are mapped to with the LookML tags parameter. For example, the Twilio Message action uses a phone tag so that LookML developers can control on which phone number fields the Twilio action will appear. * A dashboard-level action: A dashboard-level action supports sending an image of a dashboard. For example, the SendGrid action sends dashboard images through email. Adding user attributes to custom actions For custom actions, you can add user attributes in the params parameter of your action file. If the parameter is required, then each user must have a value for this attribute defined in their user account or for a user group they belong to, in addition to the send_to_integration permission, to see the action as a destination option when sending or scheduling content. To add a user attribute to your action: 1. A Looker admin may need to create the user attribute that corresponds to the user_attribute_param if it does not already exist. 2. Define a valid value for the user attribute for the users or user groups that need to deliver content to your action destination. (These users must also have send_to_integration permissions.) 3. The params parameter represents the form fields that a Looker admin must configure on the action's enablement page from the Actions list in the Admin panel. In the params parameter of your action file, include the following: params = [{ description: \"A description of the param.\", label: \"A label for the param.\", name: \"action_param_name\", user_attribute_name: \"user_attribute_name\", required: true, sensitive: true, }] where user_attribute_name is the user attribute that is defined in the Name field on the User Attributes page in the Users section of the Admin panel, required: true means that a user must have a non-null and valid value defined for that user attribute to see the action when data is being delivered, and sensitive: true means that the user attribute is encrypted and never displayed in the Looker UI once it is entered. You can specify multiple user attribute subparameters. 1. Deploy your updates to the action hub server. * If you are adding a new action, a Looker admin will need to enable the action by clicking the Enable button next to the action on the Actions page in the Admin panel. * If you are updating an existing action, refresh your list of actions by clicking the Refresh button. Next, click the Settings button. 2. On the action settings\/enablement page, a Looker admin must configure the action's form fields to pull information from the user attribute by clicking the user attribute icon to the right of the appropriate field and selecting the desired user attribute. requiredField parameters in cell-level actions For cell-level actions, you can configure your model's LookML fields to deliver data to that action destination by specifying which tags your action supports in the requiredFields parameter of your action file. Parameter | Required | Description | Data Type ---|---|---|--- tag | No | If present, matches a field that has this tag. | string any_tag | No | If present, supersedes tag and matches a field that has any of the provided tags. | string all_tags | No | If present, supersedes tag and matches a field that has all the provided tags. | string Supported data formats The DataActionRequest class defines what data delivery format is available for the action to work with. For query-level actions, the request will contain an attachment that can be in several formats. The action can either specify one or more supportedFormats or let the user choose the format by specifying all possible formats. For cell-level actions, the value of the cell will be present on DataActionRequest. Configuring an action for OAuth You can configure your action so that users can authenticate into the action with OAuth. Even though the Looker Action Hub must remain stateless, you can enforce a state through a form request from the Looker Action API. Looker action OAuth flow For actions in the Looker Action Hub, you can extend an OAuthAction instead of a Hub.Action to set a Boolean that indicates which OAuth methods are needed to authenticate a user into an action. For every OAuth-enabled or state-enabled action, Looker stores a per-user, per-action state, so that each action and user combination has an independent OAuth event. The flow for creating actions typically involves a \/form request followed by a \/execute request. For OAuth, the \/form request should have a method to determine if the user is authenticated within the target service. If the user is already authenticated, the action should return a normal \/form in accordance with whatever the \/execute request requires. If the user is not authenticated, the action returns a link that will initialize an OAuth flow. Saving state with the OAuth URL Looker will send an HTTP POST request with an empty body to the ActionList endpoint. If the action returns uses_oauth: true in its definition, then the action will be sent a one-time-use state_url in every \/form request from Looker. The state_url is a special one-time-use URL that sets a user's state for a given action. If the user is not authenticated with the endpoint, the \/form returned should contain a form_field of type oauth_link that goes to the \/oauth endpoint of an action. The state_url should be encrypted and saved as a state param in the oauth_url that is returned. For example: { \"name\":\"login\", \"type\":\"oauth_link\", \"label\":\"Log in\", \"description\":\"OAuth Link\", \"oauth_url\":\"ACTIONHUB_URL\/actions\/my_action\/oauth?state=encrypted_state_url\" } In this"
        ],
        "reference":"You can share data through Looker Actions, also known as integrations, to deliver content to third-party services integrated with Looker via an action hub server. To get started, you can use Looker's existing actions from the Looker Action Hub, build and publish a custom action to the Looker Action Hub for public use, or build and publish a custom action to a private action hub server for private use. For Looker Action Hub requirements, the server must be able to send and receive API requests from the Looker instance to the Looker Action Hub network, from the Looker user's browser to the Looker Action Hub network, and from the Looker Action Hub network to the Looker instance. If your Looker deployment cannot accommodate these requests or if the IP Allowlist feature is enabled, consider setting up a local action hub server.",
        "synthesizer_name":"multi_hop_abstract_query_synthesizer"
    }

    {
        "user_input":"how to publish custom action to looker action hub and what is needed for customer-hosted instances",
        "reference_contexts":[
            "<1-hop>\n\nPublishing and enabling a custom action There are two publication options for custom actions: * Publishing to the Looker Action Hub: This makes your action available to anyone who uses Looker. * Publishing to a private action hub server: This makes your action available on your Looker instance only. Once your action is published, you can enable it from the Actions page in the Admin panel. Publishing to the Looker Action Hub This approach is the easiest and works for any action that you'd like to make available to anyone who uses Looker. After your action has been tested, you can submit a PR to the looker-open-source\/actions repo in GitHub. 1. Enter the following command: git push <your fork> <your development branch> Create your pull request with the looker-open-source\/actions repo as your target. Fill out the Looker Marketplace & Action Hub Submission Form. For more information about the form requirements, see Submitting content to the Looker Marketplace. Looker will review your action code. We reserve the right to decline your PR but can help you with any issues that you have and offer suggestions for improvement. We then merge the code into the looker-open-source\/actions repo and deploy it to actions.looker.com. Once the code is deployed, it will be available to all Looker customers. Enable the action in your Looker instance, so that it will appear as an option for data delivery. Publishing to a private action hub server If you have custom actions that are private to your company or use case, you should not add your action to the looker-open-source\/actions repo. Instead, create a private action hub using the same Node.js framework you used to test your action. You can set up your internal action hub server on your own infrastructure or using a cloud-based application platform (our example used Heroku). Don't forget to fork the Looker Action Hub to your private action hub server before deployment. Configuring a LookML model for use with an action For both custom actions and actions that are available from the Looker Action Hub, you must identify the relevant data fields by using the tags parameter in your LookML model. The Actions page in the Admin panel will provide information about the tags that are required for the service, if any. For example, a Twilio Send Message integration sends a message to a list of phone numbers. On the Actions page in the Admin panel, the integration displays the subtext \"Action can be used with queries that have a field tagged phone\". This means that the Twilio Send Message service requires a query that includes a phone number field and that uses the tags parameter to identify which field in the query contains phone numbers. You identify a phone number field in LookML by specifying tags: [\"phone\"] for that field. Your LookML for a phone number field might look like this: dimension: phone { tags: [\"phone\"] type: string sql: ${TABLE}.phone ;; } An integration that does not require tags will display the subtext \"Action can be used with any query\" on the Actions page in the Admin panel. Be sure to identify any required fields in your LookML model with the tags parameter so that your users can use the service to send data. What's next Learn how to deliver the contents of a Look or an Explore or of a dashboard to an integrated service. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and\/or its affiliates. Last updated 2025-07-26 UTC.",
            "<2-hop>\n\nConsiderations for customer-hosted instances To use Looker integrations, the Looker Action Hub must be able to communicate with the Looker instance and fulfill the Looker Action hub requirements. This is not always possible with customer-hosted Looker instances, for various reasons. If bi-directional communication between the Looker Action Hub and the Lookerinstance is not possible, the Looker Action Hub may exhibit unexpected or undesirable behavior, such as hanging queries or unavailable actions. To address the potential issue of the Looker Action Hub not being able to communicate with the Looker instance, Looker admins can implement one of the solutions shown later on this page. The appropriate solution or combination of solutions will depend on the architecture of the Looker instance: * If the customer-hosted instance is not resolvable by the Looker Action Hub \u2014 that is, the Looker Action Hub cannot receive requests from the Looker instance \u2014 Looker admins can contact a Google Cloud sales specialist to enable the public_host_url license feature. That license feature reveals the --public-host-url startup option, which lets admins specify a resolvable <public_host_url> hostname that is different from the instance <host_looker_url>. The public_host_url overrides the hostname for some specific Looker Action Hub callback URLs and routes those callback URLs through a reverse proxy that has the public_host_url as a publicly resolvable name. This reverse proxy accepts requests only from the static egress IP addresses for the Looker Action Hub; Looker admins who use this method must add to the allowlist the egress IP addresses from which the Looker Action Hub makes requests to the Looker instance: 35.153.89.114, 104.196.138.163, and 35.169.42.87. * If the customer-hosted instance URL is resolvable by the Looker instance but the Looker Action Hub cannot send requests to the Looker instance, users may be unable to configure or use actions that support streamed results or that use OAuth. To solve this, Looker admins must add to the allowlist the egress IP addresses from which the Looker Action Hub makes requests to the Looker instance: 35.153.89.114, 104.196.138.163, and 35.169.42.87. * If neither of the aforementioned solutions is appropriate for the Looker instance architecture, Looker admins can deploy a customer-hosted action hub for all actions or just for actions that support streamed results or that use OAuth. * To deploy a customer-hosted action hub, you must ensure that the JAR file is hosted on a public server so that the Looker Action Hub can communicate with it. This solution is not recommended, however. Additionally, the OAuth and streaming actions might not be usable on a customer-hosted Looker instance if the instance uses an SSL certificate that is issued by a Certificate Authority (CA) that is not on this list of root certificates."
        ],
        "reference":"To publish a custom action to the Looker Action Hub, you need to submit a pull request to the looker-open-source\/actions repo on GitHub after testing your action. You will also need to fill out the Looker Marketplace & Action Hub Submission Form. For customer-hosted instances, if the Looker Action Hub cannot communicate with the Looker instance, admins can enable the public_host_url license feature to specify a resolvable hostname or add the Looker Action Hub egress IP addresses (35.153.89.114, 104.196.138.163, and 35.169.42.87) to an allowlist. Alternatively, a customer-hosted action hub can be deployed, but this is not recommended for all actions.",
        "synthesizer_name":"multi_hop_specific_query_synthesizer"
    }

    {
        "user_input":"How to push action code to GitHub for Looker Action Hub?",
        "reference_contexts":[
            "<1-hop>\n\nexample, the \/oauth endpoint redirects the user to the authentication server. The \/oauth endpoint constructs the redirect in the oauthUrl(...) method on an OAuth action, as shown in the Dropbox OauthUrl. The state param containing that encrypted state_url should be passed to the Looker Action Hub. Saving state with the action hub redirect URI In the \/oauth endpoint, a redirect_uri for the action hub is also created and passed to the action's oauthUrl(...) method. This redirect_uri is of the form \/actions\/src\/actions\/my_maction\/oauth_redirect and is the endpoint used if the authentication returns a result. This endpoint will call the oauthFetchInfo(...) method, which should be implemented by the OauthAction method to extract the necessary information and attempt to receive or save any state or auth received from the authentication server. The state decrypts the encrypted state_url and uses it to POST state back to Looker. The next time that a user makes a request to that action, the newly saved state will be sent to the Looker Action Hub. Adding your action files to the Looker Action Hub repo Once your action file is written, in the Looker Action Hub repo: 1. Add the action file (for example, my_action.ts) to actions\/src\/actions\/index.ts. import\".\/my_action\/my_action.ts\" Add any Node.js package requirements that you utilized in the writing of your action. For example: yarn add aws-sdk yarn add express Install the Node.js dependencies of the Looker Action Hub server. yarn install Run any tests you wrote. yarn test Testing an action For complete testing, you can try your action against your Looker instance by hosting a private action hub server. This server needs to be on the public internet with a valid SSL certificate and must be able to initiate and receive connections or HTTPS requests to and from Looker. For this, you can use a cloud-based platform such as Heroku, as shown in the following example. Alternatively, you can use any platform that satisfies the aforementioned requirements. Setting up a local action hub server In this example, we will take the action we developed in the looker-open-source\/actions\/src\/actions GitHub repo and will be committing the code to a new Git branch. We recommend that you work on features using branches so that you can easily track your code and, if desired, easily create a PR with Looker. 1. To get started, create your branch and then stage and commit your work. For example: git checkout -b my-branch-name git add file-names git commit -m commit-message For this example, to push a branch to Heroku, configure your Git repo with Heroku as a remote option in your command line: heroku login heroku create git push heroku Heroku will return the public URL now hosting the action hub for your use. Visit the URL or run heroku logs to confirm that the action hub is running. If you forget the public URL, you can run the following in your command line: heroku info -s | grep web_url Heroku will return your public URL. For example: https:\/\/my-heroku-action-server-1234.herokuapp.com 4. In your command line, set your action hub base URL: heroku config:set ACTION_HUB_BASE_URL=\"https:\/\/my-heroku-action-server-1234.herokuapp.com\" Set your action hub label: heroku config:set ACTION_HUB_LABEL=\"Your Action Hub\" Looker uses an authorization token to connect to the action hub. Generate the token in your command line: heroku run yarn generate-api-key If you are not using Heroku, as we are in this example, instead use: yarn generate-api-key Heroku will return your authorization token. For example: Authorization: Token token=\"abcdefg123456789\" 7. Set your action hub secret using the secret key: heroku config:set ACTION_HUB_SECRET=\"abcdefg123456789\" Customer-hosted deployments may require configuration of additional environment variables not documented here. 8. Add your action on your local Looker instance by going to Admin > Actions. * At the bottom of the list of actions, click Add Action Hub. * Enter the Action Hub URL and, optionally, a Secret Key. * Find your action in the Actions list within Looker's Admin menu. * Click Enable. If your action requires that specific kinds of data be passed from Looker, be sure to configure any models to include the appropriate tags parameter. Now you're ready to test your action! Testing dashboard-level and query-level actions In your Looker instance, configure your LookML model with tags, if necessary. Create and save a Look. On the saved Look, click the upper-right menu and select Send with your action as the destination. If you have a form for delivery, Looker will render it in the Sent window. Click Send Test to deliver the data. The status of the action will appear in the Scheduler History in the Admin panel. If your action encounters an error, it will be shown in the Admin panel, and Looker will send an email with the error message to the user who sent the action. Testing cell-level actions Set up a LookML field with the proper tags for your action. In your Looker instance, run a query that includes that field. Find the field in the data table. Click the \u2026 in the cell and select Send from the drop-down menu. If you receive errors, you'll need to do a full refresh on the data table after you address those errors. * If your action is delivered without any errors, you're ready to publish your action! * If you want to keep hosting your action privately, you can publish to your private action hub. * If you want to publish your action for use by all Looker customers, see the section on Publishing to the Looker Action Hub.",
            "<2-hop>\n\nPublishing and enabling a custom action There are two publication options for custom actions: * Publishing to the Looker Action Hub: This makes your action available to anyone who uses Looker. * Publishing to a private action hub server: This makes your action available on your Looker instance only. Once your action is published, you can enable it from the Actions page in the Admin panel. Publishing to the Looker Action Hub This approach is the easiest and works for any action that you'd like to make available to anyone who uses Looker. After your action has been tested, you can submit a PR to the looker-open-source\/actions repo in GitHub. 1. Enter the following command: git push <your fork> <your development branch> Create your pull request with the looker-open-source\/actions repo as your target. Fill out the Looker Marketplace & Action Hub Submission Form. For more information about the form requirements, see Submitting content to the Looker Marketplace. Looker will review your action code. We reserve the right to decline your PR but can help you with any issues that you have and offer suggestions for improvement. We then merge the code into the looker-open-source\/actions repo and deploy it to actions.looker.com. Once the code is deployed, it will be available to all Looker customers. Enable the action in your Looker instance, so that it will appear as an option for data delivery. Publishing to a private action hub server If you have custom actions that are private to your company or use case, you should not add your action to the looker-open-source\/actions repo. Instead, create a private action hub using the same Node.js framework you used to test your action. You can set up your internal action hub server on your own infrastructure or using a cloud-based application platform (our example used Heroku). Don't forget to fork the Looker Action Hub to your private action hub server before deployment. Configuring a LookML model for use with an action For both custom actions and actions that are available from the Looker Action Hub, you must identify the relevant data fields by using the tags parameter in your LookML model. The Actions page in the Admin panel will provide information about the tags that are required for the service, if any. For example, a Twilio Send Message integration sends a message to a list of phone numbers. On the Actions page in the Admin panel, the integration displays the subtext \"Action can be used with queries that have a field tagged phone\". This means that the Twilio Send Message service requires a query that includes a phone number field and that uses the tags parameter to identify which field in the query contains phone numbers. You identify a phone number field in LookML by specifying tags: [\"phone\"] for that field. Your LookML for a phone number field might look like this: dimension: phone { tags: [\"phone\"] type: string sql: ${TABLE}.phone ;; } An integration that does not require tags will display the subtext \"Action can be used with any query\" on the Actions page in the Admin panel. Be sure to identify any required fields in your LookML model with the tags parameter so that your users can use the service to send data. What's next Learn how to deliver the contents of a Look or an Explore or of a dashboard to an integrated service. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and\/or its affiliates. Last updated 2025-07-26 UTC."
        ],
        "reference":"To push action code to GitHub for the Looker Action Hub, you need to add your action file to the looker-open-source\/actions repo. This involves adding the action file to actions\/src\/actions\/index.ts, importing it, and then adding any Node.js package requirements. After installing Node.js dependencies and running tests, you create a new Git branch, stage and commit your work, and then push this branch to Heroku. Heroku will provide a public URL for your action hub. You then set your action hub base URL and label using Heroku config commands. Finally, generate an API key and set your action hub secret. For private actions, you create a private action hub instead of adding to the GitHub repo.",
        "synthesizer_name":"multi_hop_specific_query_synthesizer"
    }

    {
        "user_input":"How can an Admin add and enable a custom action hub in Looker, and what are the steps to test dashboard-level and query-level actions after configuration?",
        "reference_contexts":[
            "<1-hop>\n\nexample, the \/oauth endpoint redirects the user to the authentication server. The \/oauth endpoint constructs the redirect in the oauthUrl(...) method on an OAuth action, as shown in the Dropbox OauthUrl. The state param containing that encrypted state_url should be passed to the Looker Action Hub. Saving state with the action hub redirect URI In the \/oauth endpoint, a redirect_uri for the action hub is also created and passed to the action's oauthUrl(...) method. This redirect_uri is of the form \/actions\/src\/actions\/my_maction\/oauth_redirect and is the endpoint used if the authentication returns a result. This endpoint will call the oauthFetchInfo(...) method, which should be implemented by the OauthAction method to extract the necessary information and attempt to receive or save any state or auth received from the authentication server. The state decrypts the encrypted state_url and uses it to POST state back to Looker. The next time that a user makes a request to that action, the newly saved state will be sent to the Looker Action Hub. Adding your action files to the Looker Action Hub repo Once your action file is written, in the Looker Action Hub repo: 1. Add the action file (for example, my_action.ts) to actions\/src\/actions\/index.ts. import\".\/my_action\/my_action.ts\" Add any Node.js package requirements that you utilized in the writing of your action. For example: yarn add aws-sdk yarn add express Install the Node.js dependencies of the Looker Action Hub server. yarn install Run any tests you wrote. yarn test Testing an action For complete testing, you can try your action against your Looker instance by hosting a private action hub server. This server needs to be on the public internet with a valid SSL certificate and must be able to initiate and receive connections or HTTPS requests to and from Looker. For this, you can use a cloud-based platform such as Heroku, as shown in the following example. Alternatively, you can use any platform that satisfies the aforementioned requirements. Setting up a local action hub server In this example, we will take the action we developed in the looker-open-source\/actions\/src\/actions GitHub repo and will be committing the code to a new Git branch. We recommend that you work on features using branches so that you can easily track your code and, if desired, easily create a PR with Looker. 1. To get started, create your branch and then stage and commit your work. For example: git checkout -b my-branch-name git add file-names git commit -m commit-message For this example, to push a branch to Heroku, configure your Git repo with Heroku as a remote option in your command line: heroku login heroku create git push heroku Heroku will return the public URL now hosting the action hub for your use. Visit the URL or run heroku logs to confirm that the action hub is running. If you forget the public URL, you can run the following in your command line: heroku info -s | grep web_url Heroku will return your public URL. For example: https:\/\/my-heroku-action-server-1234.herokuapp.com 4. In your command line, set your action hub base URL: heroku config:set ACTION_HUB_BASE_URL=\"https:\/\/my-heroku-action-server-1234.herokuapp.com\" Set your action hub label: heroku config:set ACTION_HUB_LABEL=\"Your Action Hub\" Looker uses an authorization token to connect to the action hub. Generate the token in your command line: heroku run yarn generate-api-key If you are not using Heroku, as we are in this example, instead use: yarn generate-api-key Heroku will return your authorization token. For example: Authorization: Token token=\"abcdefg123456789\" 7. Set your action hub secret using the secret key: heroku config:set ACTION_HUB_SECRET=\"abcdefg123456789\" Customer-hosted deployments may require configuration of additional environment variables not documented here. 8. Add your action on your local Looker instance by going to Admin > Actions. * At the bottom of the list of actions, click Add Action Hub. * Enter the Action Hub URL and, optionally, a Secret Key. * Find your action in the Actions list within Looker's Admin menu. * Click Enable. If your action requires that specific kinds of data be passed from Looker, be sure to configure any models to include the appropriate tags parameter. Now you're ready to test your action! Testing dashboard-level and query-level actions In your Looker instance, configure your LookML model with tags, if necessary. Create and save a Look. On the saved Look, click the upper-right menu and select Send with your action as the destination. If you have a form for delivery, Looker will render it in the Sent window. Click Send Test to deliver the data. The status of the action will appear in the Scheduler History in the Admin panel. If your action encounters an error, it will be shown in the Admin panel, and Looker will send an email with the error message to the user who sent the action. Testing cell-level actions Set up a LookML field with the proper tags for your action. In your Looker instance, run a query that includes that field. Find the field in the data table. Click the \u2026 in the cell and select Send from the drop-down menu. If you receive errors, you'll need to do a full refresh on the data table after you address those errors. * If your action is delivered without any errors, you're ready to publish your action! * If you want to keep hosting your action privately, you can publish to your private action hub. * If you want to publish your action for use by all Looker customers, see the section on Publishing to the Looker Action Hub.",
            "<2-hop>\n\nSelecting an effective data visualization | Looker | Google Cloud Source: https:\/\/cloud.google.com\/looker\/docs\/visualization-guide Skip to main content * Espa\u00f1ol \u2013 Am\u00e9rica Latina Console On this page Consider the characteristics of your data Define your audience Select the best visualization for your data Cartesian charts page in the Admin section of Looker Examples of custom visualizations that are available as plug-ins include the Calendar Heatmap Visualization and the Aster Plot Visualization. See the Admin settings - Visualizations documentation page to learn more about custom visualization implementation. Additionally, you can create visualizations unique to your project. See the Developing a custom visualization for the Looker Marketplace documentation page to learn more about creating these visualizations and how they can work to reflect your data visualization goals. Was this helpful? Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and\/or its affiliates. Last updated 2025-07-22 UTC."
        ],
        "reference":"To add and enable a custom action hub in Looker, an Admin should navigate to Admin > Actions, click \"Add Action Hub\" at the bottom of the list, and then enter the Action Hub URL and optionally a Secret Key. Once added, the action can be found in the Actions list within Looker's Admin menu and can be enabled. To test dashboard-level and query-level actions, configure the LookML model with necessary tags, create and save a Look, then select \"Send with your action\" from the Look's upper-right menu. If a form is present, Looker will render it in the Sent window, and the data can be sent for testing. The action's status will appear in the Scheduler History in the Admin panel, and any errors will be displayed there and emailed to the user who sent the action.",
        "synthesizer_name":"multi_hop_specific_query_synthesizer"
    }

    {
        "user_input":"How can I configure my Looker instance to enable a custom action that utilizes user attributes, and what is the process for testing cell-level actions within the Action Hub?",
        "reference_contexts":[
            "<1-hop>\n\nexample, the \/oauth endpoint redirects the user to the authentication server. The \/oauth endpoint constructs the redirect in the oauthUrl(...) method on an OAuth action, as shown in the Dropbox OauthUrl. The state param containing that encrypted state_url should be passed to the Looker Action Hub. Saving state with the action hub redirect URI In the \/oauth endpoint, a redirect_uri for the action hub is also created and passed to the action's oauthUrl(...) method. This redirect_uri is of the form \/actions\/src\/actions\/my_maction\/oauth_redirect and is the endpoint used if the authentication returns a result. This endpoint will call the oauthFetchInfo(...) method, which should be implemented by the OauthAction method to extract the necessary information and attempt to receive or save any state or auth received from the authentication server. The state decrypts the encrypted state_url and uses it to POST state back to Looker. The next time that a user makes a request to that action, the newly saved state will be sent to the Looker Action Hub. Adding your action files to the Looker Action Hub repo Once your action file is written, in the Looker Action Hub repo: 1. Add the action file (for example, my_action.ts) to actions\/src\/actions\/index.ts. import\".\/my_action\/my_action.ts\" Add any Node.js package requirements that you utilized in the writing of your action. For example: yarn add aws-sdk yarn add express Install the Node.js dependencies of the Looker Action Hub server. yarn install Run any tests you wrote. yarn test Testing an action For complete testing, you can try your action against your Looker instance by hosting a private action hub server. This server needs to be on the public internet with a valid SSL certificate and must be able to initiate and receive connections or HTTPS requests to and from Looker. For this, you can use a cloud-based platform such as Heroku, as shown in the following example. Alternatively, you can use any platform that satisfies the aforementioned requirements. Setting up a local action hub server In this example, we will take the action we developed in the looker-open-source\/actions\/src\/actions GitHub repo and will be committing the code to a new Git branch. We recommend that you work on features using branches so that you can easily track your code and, if desired, easily create a PR with Looker. 1. To get started, create your branch and then stage and commit your work. For example: git checkout -b my-branch-name git add file-names git commit -m commit-message For this example, to push a branch to Heroku, configure your Git repo with Heroku as a remote option in your command line: heroku login heroku create git push heroku Heroku will return the public URL now hosting the action hub for your use. Visit the URL or run heroku logs to confirm that the action hub is running. If you forget the public URL, you can run the following in your command line: heroku info -s | grep web_url Heroku will return your public URL. For example: https:\/\/my-heroku-action-server-1234.herokuapp.com 4. In your command line, set your action hub base URL: heroku config:set ACTION_HUB_BASE_URL=\"https:\/\/my-heroku-action-server-1234.herokuapp.com\" Set your action hub label: heroku config:set ACTION_HUB_LABEL=\"Your Action Hub\" Looker uses an authorization token to connect to the action hub. Generate the token in your command line: heroku run yarn generate-api-key If you are not using Heroku, as we are in this example, instead use: yarn generate-api-key Heroku will return your authorization token. For example: Authorization: Token token=\"abcdefg123456789\" 7. Set your action hub secret using the secret key: heroku config:set ACTION_HUB_SECRET=\"abcdefg123456789\" Customer-hosted deployments may require configuration of additional environment variables not documented here. 8. Add your action on your local Looker instance by going to Admin > Actions. * At the bottom of the list of actions, click Add Action Hub. * Enter the Action Hub URL and, optionally, a Secret Key. * Find your action in the Actions list within Looker's Admin menu. * Click Enable. If your action requires that specific kinds of data be passed from Looker, be sure to configure any models to include the appropriate tags parameter. Now you're ready to test your action! Testing dashboard-level and query-level actions In your Looker instance, configure your LookML model with tags, if necessary. Create and save a Look. On the saved Look, click the upper-right menu and select Send with your action as the destination. If you have a form for delivery, Looker will render it in the Sent window. Click Send Test to deliver the data. The status of the action will appear in the Scheduler History in the Admin panel. If your action encounters an error, it will be shown in the Admin panel, and Looker will send an email with the error message to the user who sent the action. Testing cell-level actions Set up a LookML field with the proper tags for your action. In your Looker instance, run a query that includes that field. Find the field in the data table. Click the \u2026 in the cell and select Send from the drop-down menu. If you receive errors, you'll need to do a full refresh on the data table after you address those errors. * If your action is delivered without any errors, you're ready to publish your action! * If you want to keep hosting your action privately, you can publish to your private action hub. * If you want to publish your action for use by all Looker customers, see the section on Publishing to the Looker Action Hub.",
            "<2-hop>\n\nan entire query. The Segment action, for example, is a query-level action. * A cell-level action: A cell-level action sends the value of a single, specific cell in a data table. This action type is different from data actions, which can be defined for dimensions or measures using the action parameter. To send information from a specific cell within a table, Looker uses tags to map actions to the corresponding cells. Actions need to specify which tags they support in requiredFields. To map actions and fields, fields in LookML need to specify which tags they are mapped to with the LookML tags parameter. For example, the Twilio Message action uses a phone tag so that LookML developers can control on which phone number fields the Twilio action will appear. * A dashboard-level action: A dashboard-level action supports sending an image of a dashboard. For example, the SendGrid action sends dashboard images through email. Adding user attributes to custom actions For custom actions, you can add user attributes in the params parameter of your action file. If the parameter is required, then each user must have a value for this attribute defined in their user account or for a user group they belong to, in addition to the send_to_integration permission, to see the action as a destination option when sending or scheduling content. To add a user attribute to your action: 1. A Looker admin may need to create the user attribute that corresponds to the user_attribute_param if it does not already exist. 2. Define a valid value for the user attribute for the users or user groups that need to deliver content to your action destination. (These users must also have send_to_integration permissions.) 3. The params parameter represents the form fields that a Looker admin must configure on the action's enablement page from the Actions list in the Admin panel. In the params parameter of your action file, include the following: params = [{ description: \"A description of the param.\", label: \"A label for the param.\", name: \"action_param_name\", user_attribute_name: \"user_attribute_name\", required: true, sensitive: true, }] where user_attribute_name is the user attribute that is defined in the Name field on the User Attributes page in the Users section of the Admin panel, required: true means that a user must have a non-null and valid value defined for that user attribute to see the action when data is being delivered, and sensitive: true means that the user attribute is encrypted and never displayed in the Looker UI once it is entered. You can specify multiple user attribute subparameters. 1. Deploy your updates to the action hub server. * If you are adding a new action, a Looker admin will need to enable the action by clicking the Enable button next to the action on the Actions page in the Admin panel. * If you are updating an existing action, refresh your list of actions by clicking the Refresh button. Next, click the Settings button. 2. On the action settings\/enablement page, a Looker admin must configure the action's form fields to pull information from the user attribute by clicking the user attribute icon to the right of the appropriate field and selecting the desired user attribute. requiredField parameters in cell-level actions For cell-level actions, you can configure your model's LookML fields to deliver data to that action destination by specifying which tags your action supports in the requiredFields parameter of your action file. Parameter | Required | Description | Data Type ---|---|---|--- tag | No | If present, matches a field that has this tag. | string any_tag | No | If present, supersedes tag and matches a field that has any of the provided tags. | string all_tags | No | If present, supersedes tag and matches a field that has all the provided tags. | string Supported data formats The DataActionRequest class defines what data delivery format is available for the action to work with. For query-level actions, the request will contain an attachment that can be in several formats. The action can either specify one or more supportedFormats or let the user choose the format by specifying all possible formats. For cell-level actions, the value of the cell will be present on DataActionRequest. Configuring an action for OAuth You can configure your action so that users can authenticate into the action with OAuth. Even though the Looker Action Hub must remain stateless, you can enforce a state through a form request from the Looker Action API. Looker action OAuth flow For actions in the Looker Action Hub, you can extend an OAuthAction instead of a Hub.Action to set a Boolean that indicates which OAuth methods are needed to authenticate a user into an action. For every OAuth-enabled or state-enabled action, Looker stores a per-user, per-action state, so that each action and user combination has an independent OAuth event. The flow for creating actions typically involves a \/form request followed by a \/execute request. For OAuth, the \/form request should have a method to determine if the user is authenticated within the target service. If the user is already authenticated, the action should return a normal \/form in accordance with whatever the \/execute request requires. If the user is not authenticated, the action returns a link that will initialize an OAuth flow. Saving state with the OAuth URL Looker will send an HTTP POST request with an empty body to the ActionList endpoint. If the action returns uses_oauth: true in its definition, then the action will be sent a one-time-use state_url in every \/form request from Looker. The state_url is a special one-time-use URL that sets a user's state for a given action. If the user is not authenticated with the endpoint, the \/form returned should contain a form_field of type oauth_link that goes to the \/oauth endpoint of an action. The state_url should be encrypted and saved as a state param in the oauth_url that is returned. For example: { \"name\":\"login\", \"type\":\"oauth_link\", \"label\":\"Log in\", \"description\":\"OAuth Link\", \"oauth_url\":\"ACTIONHUB_URL\/actions\/my_action\/oauth?state=encrypted_state_url\" } In this"
        ],
        "reference":"To enable a custom action that utilizes user attributes in Looker, a Looker admin may need to create the corresponding user attribute. This attribute must then be defined with a valid value for the users or user groups that need to deliver content to the action destination, and these users must also have send_to_integration permissions. The action file's params parameter should include the user attribute name, specifying if it's required and if it's sensitive. After deploying updates to the action hub server, a Looker admin must enable the action in the Admin panel and configure its form fields to pull information from the user attribute. For testing cell-level actions, you need to set up a LookML field with the proper tags for your action. Then, run a query that includes this field in your Looker instance. Locate the field in the data table, click the \"...\" in the cell, and select \"Send\" from the drop-down menu. If errors occur, a full refresh of the data table is necessary after addressing them. Successful delivery means the action is ready to publish, either to a private action hub or publicly to all Looker customers.",
        "synthesizer_name":"multi_hop_specific_query_synthesizer"
    }

